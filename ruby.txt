
 . put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________


please give me ruby code for `if`, `elsif`, `else` – Conditional statements for branching logic. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________


please give me ruby code for `unless` – The opposite of `if`, executes code if the condition is false. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________


please give me ruby code for put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `case`, `when`, `else` – Switchlike conditional statement. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `while` – Loop that runs while a condition is true. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `until` – Loop that runs until a condition is true (opposite of `while`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `for` – Traditional for loop (less common in Ruby, but still available). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `each` – Iterates over collections (like arrays, hashes, etc.). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `break` – Exits a loop or iteration. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `next` – Skips to the next iteration in a loop. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `redo` – Repeats the current iteration of a loop. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for `retry` – Retrying a block after an error (in combination with `begin`/`rescue`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________


please give me ruby code for Classes – Define blueprints for creating objects (`class MyClass`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



please give me ruby code for Objects – Instances of a class that hold state and behavior. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



`attr_reader`, `attr_writer`, `attr_accessor` – Define getter/setter methods for instance variables. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Methods – Functions defined within a class (`def my_method`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________






__________________________________________________________________________

`initialize` – Constructor method used to set up an object when it’s created. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



`self` – Refers to the current object or class (used to call instance methods or class methods). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Inheritance – Subclassing a class (`class Child < Parent`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Polymorphism – Ability of different objects to respond to the same method in different ways. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Encapsulation – Keeping instance variables private with getter/setter methods. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________






__________________________________________________________________________

`super` – Calls the same method from the parent class. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Modules – Group related methods and constants (`module MyModule`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Mixin – Using modules to add behavior to classes (`include MyModule`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________







__________________________________________________________________________

. Variables & Data Types
Local variables – Defined with lowercase letters (`my_var`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Global variables – Prefixed with `$` (`$global_var`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Instance variables – Prefixed with `@` (`@instance_var`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________






__________________________________________________________________________

Class variables – Prefixed with `@@` (`@@class_var`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Constants – Uppercase names (`MY_CONSTANT`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Symbols – Lightweight strings (e.g., `:my_symbol`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Arrays – Ordered collections (`arr = [, , ]`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________






__________________________________________________________________________

Hashes – Keyvalue pairs (`hash = {key: 'value'}`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Ranges – A range of values (`..`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Booleans – `true` or `false`. put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



Nil – Represents the absence of a value (`nil`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________






__________________________________________________________________________


. Block & Iteration
Blocks – Anonymous pieces of code passed to methods (`my_method { puts 'Hello' }`). put a comment beside each line of code without skipping. some of my students have no prior programming concepts whatsoever 


__________________________________________________________________________



`yield` – Transfers control from a method to the block.
`each`, `map`, `select`, `inject` – Common iteration methods for arrays and other collections.



__________________________________________________________________________

`Proc` – Object representing a block of code that can be executed later.
`lambda` – Similar to a proc, but with strict argument checking.

5. Exception Handling
`begin`/`rescue`/`ensure` – Handle exceptions and cleanup resources.
`raise` – Raise exceptions intentionally.



__________________________________________________________________________

`rescue` – Handle specific errors or all errors.
`ensure` – Code that runs after the `begin` block, regardless of errors.

. Required Libraries & Loading
`require` – Loads external libraries or Ruby files (`require 'fileutils'`).
`require_relative` – Loads files relative to the current file (`require_relative 'my_file'`).
`load` – Reloads the specified Ruby file every time it’s called.



__________________________________________________________________________

`autoload` – Automatically loads a file when a constant is first accessed.

. Other Key Features
`return` – Exits a method and optionally returns a value.
`unless` – Executes code if the condition is false (opposite of `if`).
`puts`, `print`, `p` – Output methods for printing to the console.
`gets` – Reads input from the user.



__________________________________________________________________________

`require` – Load external files, gems, or libraries.
`alias` – Create an alias for a method or variable.
`undef` – Undefine an existing method.

. Metaprogramming (Advanced)
`define_method` – Dynamically defines a method at runtime.
`method_missing` – Intercepts calls to undefined methods.



__________________________________________________________________________

`self` – Used to refer to the current class or object in dynamic contexts.
`class_eval` – Evaluates code within the context of a class.
`module_eval` – Evaluates code within the context of a module.

. Enumerable Methods
`map` – Transforms elements in a collection.
`select` – Filters elements based on conditions.
`reject` – Filters out elements based on conditions.



__________________________________________________________________________

`reduce`/`inject` – Accumulates a result across all elements.
`each_with_index` – Iterates with an index.
`find` – Returns the first element matching a condition.
`all?` – Checks if all elements satisfy a condition.
`any?` – Checks if any element satisfies a condition.



__________________________________________________________________________


. Other Important Constructs
`$LOAD_PATH` – Array of directories Ruby searches for required files.
`binding` – Represents the current execution context, useful for debugging.
`eval` – Executes a string of Ruby code.
`Objectclone` and `Objectdup` – Create shallow or deep copies of objects.



__________________________________________________________________________

`to_s`, `to_i`, `to_a` – Methods to convert objects to strings, integers, or arrays.
`Stringchomp` – Removes the newline character from the end of a string.




